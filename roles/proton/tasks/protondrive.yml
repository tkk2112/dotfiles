---
- name: Install rclone
  ansible.builtin.command:
    cmd: go install github.com/rclone/rclone@latest
  environment:
    GOPATH: "{{ gopath }}"
  args:
    creates: "{{ gopath }}/bin/rclone"

- name: Ensure rclone config directory exists
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.config/rclone"
    state: directory
    mode: "0700"

- name: Check if rclone config exists
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.config/rclone/rclone.conf"
  register: rclone_config

- name: Check for client_access_token in config
  ansible.builtin.command:
    cmd: grep -q "client_access_token = [^[:space:]]" {{ ansible_env.HOME }}/.config/rclone/rclone.conf
  register: token_check
  failed_when: false
  changed_when: false
  when: rclone_config.stat.exists

- name: Configure rclone for ProtonDrive
  ansible.builtin.copy:
    dest: "{{ ansible_env.HOME }}/.config/rclone/rclone.conf"
    content: |
      [protondrive]
      type = protondrive
    mode: "0600"
    force: true
  when: not rclone_config.stat.exists or (token_check.rc != 0)

- name: Ask for Proton username
  ansible.builtin.pause:
    prompt: "Enter Proton username: "
    echo: true
  register: proton_username
  no_log: true
  when: not rclone_config.stat.exists or (token_check.rc != 0)

- name: Ask for Proton password
  ansible.builtin.pause:
    prompt: "Enter Proton password: "
    echo: false
  register: proton_password
  no_log: true
  when: not rclone_config.stat.exists or (token_check.rc != 0)

- name: Ask for Proton 2FA
  ansible.builtin.pause:
    prompt: "Enter Proton 2FA: "
    echo: true
  register: proton_2fa
  no_log: true
  when: not rclone_config.stat.exists or (token_check.rc != 0)

- name: Obscure the password using rclone
  ansible.builtin.command:
    cmd: rclone obscure {{ proton_password.user_input }}
  register: obscured_password
  no_log: true
  when: not rclone_config.stat.exists or (token_check.rc != 0)
  changed_when: false

- name: Login to ProtonDrive to store client_access_token
  ansible.builtin.command:
    cmd: "rclone about protondrive: --protondrive-username {{ proton_username.user_input }} --protondrive-password {{ obscured_password.stdout }} --protondrive-2fa={{ proton_2fa.user_input }}"
  no_log: true
  when: not rclone_config.stat.exists or (token_check.rc != 0)
  changed_when: false

- name: Ensure rclone config has correct permissions
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.config/rclone/rclone.conf"
    mode: "0600"

- name: Add .proton_sync file
  ansible.builtin.copy:
    dest: "{{ ansible_env.HOME }}/.proton_sync"
    content: "{{ proton_sync_content }}"
    mode: "0600"
    force: false

- name: Symlink sync script
  ansible.builtin.file:
    src: "{{ role_path }}/files/proton-sync.sh"
    dest: "{{ ansible_env.HOME }}/.local/bin/proton-sync.sh"
    state: link
    force: true

- name: Create proton-sync.timer service
  ansible.builtin.copy:
    dest: "{{ ansible_env.HOME }}/.config/systemd/user/proton-sync.timer"
    content: |
      [Unit]
      Description=Periodic ProtonDrive sync

      [Timer]
      OnBootSec={{ proton_drive_rclone_run_delay_after_boot }}
      OnUnitActiveSec={{ proton_drive_rclone_rerun_delay }}

      [Install]
      WantedBy=timers.target
    mode: "0644"
  notify:
    - Enable and start proton-sync services
    - Reload proton-sync services

- name: Create proton-sync.service
  ansible.builtin.copy:
    dest: "{{ ansible_env.HOME }}/.config/systemd/user/proton-sync.service"
    content: |
      [Unit]
      Description=ProtonDrive sync service

      [Service]
      Type=oneshot
      ExecStart=%h/.local/bin/proton-sync.sh
      StandardOutput=journal
      StandardError=journal

      [Install]
      WantedBy=default.target
    mode: "0644"
  notify:
    - Enable and start proton-sync services
    - Reload proton-sync services

- name: Set proton_drive_enabled fact
  ansible.builtin.set_fact:
    proton_drive_enabled: true
    proton_drive_rclone: true
