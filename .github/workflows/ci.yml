name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  check:
      name: check'n'test
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - uses: astral-sh/setup-uv@v5
          with:
            enable-cache: true
            cache-dependency-glob: "uv.lock"
        - uses: actions/cache@v4
          with:
            path: ~/.cache/pre-commit
            key: pre-commit-5|${{ hashFiles('uv.lock') }}|${{ hashFiles('.pre-commit-config.yaml') }}
        - run: uv run alias check
        - run: uv run alias test

  platform-run:
    name: ${{ matrix.task.name }} on ${{ matrix.os.name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          - name: debian:bookworm
            image: debian:bookworm
          - name: debian:testing
            image: debian:testing
            continue-on-error: true
          - name: ubuntu:24.04
            image: ubuntu:24.04
            continue-on-error: true
        task:
          - name: linter
            setup_args: "--only-lint"
          - name: playbook
            setup_args: "--skip-lint"
    container:
      image: ${{ matrix.os.image }}
    steps:
      - name: Install dependencies
        env:
          APT_PKGS: ${{ matrix.os.apt_pkgs || 'git curl sudo' }}
          DEBIAN_FRONTEND: "noninteractive"
        run: |
          apt -qq update </dev/null >/dev/null
          apt -qq install -y ${APT_PKGS} </dev/null >/dev/null

      - uses: actions/checkout@v4

      - name: Add user if needed
        run: |
          USERNAME="newuser"
          if getent passwd 1000 >/dev/null; then
            echo "User with UID 1000 already exists"
            USERNAME=$(getent passwd 1000 | cut -d: -f1)
          else
            echo "Creating user ${USERNAME} with UID/GID 1000"
            groupadd --gid 1000 ${USERNAME} || true
            useradd --uid 1000 --gid 1000 --create-home --shell /bin/bash ${USERNAME}
          fi

          echo "${USERNAME} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          echo "USERNAME=${USERNAME}" >> "$GITHUB_ENV"

          if [ -d /workspace ]; then
            echo "DOTFILES_LOCATION=/worspace" >> "$GITHUB_ENV"
            chown -R 1000:1000 /workspace
          else
            echo "DOTFILES_LOCATION=$GITHUB_WORKSPACE" >> "$GITHUB_ENV"
            chown -R 1000:1000 $GITHUB_WORKSPACE
          fi

      - name: Set commit variable
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "COMMIT=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          else
            echo "COMMIT=${{ github.sha }}" >> $GITHUB_ENV
          fi

      - name: "Exec task (${{ matrix.task.name }}): $ setup.sh ${{ matrix.task.setup_args }}"
        env:
          SETUP_ARGS: ${{ matrix.task.setup_args }}
          SH_ARGS: ${{ matrix.task.sh_args || '' }}

        run: |
          su --login --whitelist-environment=DOTFILES_LOCATION ${USERNAME} -c \
           "curl -LsS https://raw.githubusercontent.com/tkk2112/dotfiles/${COMMIT}/setup.sh | sh ${SH_ARGS}-s -- ${SETUP_ARGS}"

  test:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: platform-run
    steps:
      - run: exit 1
        if: ${{ contains(toJSON(needs.*.result), 'failure') || contains(toJSON(needs.*.result), 'cancelled') }}
